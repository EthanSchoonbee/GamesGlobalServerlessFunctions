name: Deploy to ECR repository

on:
  push:
    branches:
      - main

jobs:
  non-code-dependent-cloud-formation:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: 'Validate CloudFormation templates'
        shell: bash
        run: | 
            aws cloudformation validate-template --template-body file://cloudformation/network.yml
            aws cloudformation validate-template --template-body file://cloudformation/dynamodb.yml
            aws cloudformation validate-template --template-body file://cloudformation/ecr.yml
            aws cloudformation validate-template --template-body file://cloudformation/security-groups.yml

      - name: 'Deploy resources'
        shell: bash
        run: |
            aws cloudformation deploy \
              --template-file cloudformation/network.yml \
              --stack-name network-stack \
              --capabilities CAPABILITY_NAMED_IAM
            
            aws cloudformation deploy \
              --template-file cloudformation/ecr.yml \
              --stack-name ecr-stack \
              --parameter-overrides \
                LogReaderECRRepo=${{ vars.READER_ECR_REPO }} \
                LogWriterECRRepo=${{ vars.WRITER_ECR_REPO }}
          
            aws cloudformation deploy \
              --template-file cloudformation/security-groups.yml \
              --stack-name security-groups-stack 
          
            aws cloudformation deploy \
              --template-file cloudformation/dynamodb.yml \
              --stack-name dynamodb-stack

  deploy-reader-function:
    runs-on: ubuntu-latest
    needs:
      - non-code-dependent-cloud-formation
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and Push Docker Image
        working-directory: ./reader
        shell: bash
        id: build-and-push
        run: |
          IMAGE_URI=${{ steps.login-ecr.outputs.registry }}/${{ vars.READER_ECR_REPO }}:latest

          # Build the Docker image
          echo "Building Docker image..."
          docker build -t $IMAGE_URI .

          # Push the Docker image to ECR
          echo "Pushing Docker image to $IMAGE_URI..."
          docker push $IMAGE_URI

  deploy-write-function:
    runs-on: ubuntu-latest
    needs:
       - non-code-dependent-cloud-formation
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and Push Docker Image
        working-directory: ./writer
        shell: bash
        id: build-and-push
        run: |
          IMAGE_URI=${{ steps.login-ecr.outputs.registry }}/${{ vars.WRITER_ECR_REPO }}:latest

          # Build the Docker image
          echo "Building Docker image..."
          docker build -t $IMAGE_URI .

          # Push the Docker image to ECR
          echo "Pushing Docker image to $IMAGE_URI..."
          docker push $IMAGE_URI

  code-dependent-cloud-formation:
      runs-on: ubuntu-latest
      needs:
        - deploy-write-function
        - deploy-reader-function
      steps:
        - name: Checkout code
          uses: actions/checkout@v3

        - name: Configure AWS credentials
          uses: aws-actions/configure-aws-credentials@v2
          with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-region: ${{ vars.AWS_REGION }}

        - name: 'Validate CloudFormation templates'
          shell: bash
          run: |
            aws cloudformation validate-template --template-body file://cloudformation/log-reader-lambda-function.yml
            aws cloudformation validate-template --template-body file://cloudformation/log-writer-lambda-function.yml

        - name: 'Deploy resources'
          shell: bash
          run: |
            
            aws cloudformation deploy \
              --template-file cloudformation/log-reader-lambda-function.yml \
              --stack-name log-reader-lambda-function-stack \
              --capabilities CAPABILITY_NAMED_IAM \
              --parameter-overrides \
                FunctionName=${{ vars.READER_FUNCTION_NAME }}
            
            aws cloudformation deploy \
              --template-file cloudformation/log-writer-lambda-function.yml \
              --stack-name log-writer-lambda-function-stack \
              --capabilities CAPABILITY_NAMED_IAM \
              --parameter-overrides \
                FunctionName=${{ vars.WRITER_FUNCTION_NAME }}

  update-log-reader-lambda-function:
    runs-on: ubuntu-latest
    needs:
      - code-dependent-cloud-formation
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Update lambda function
        shell: bash
        run: |
          IMAGE_URI=${{ steps.login-ecr.outputs.registry }}/${{ vars.READER_ECR_REPO }}:latest
          
          echo "Updating Lambda function ${{ vars.READER_FUNCTION_NAME }} with image $IMAGE_URI..."
          aws lambda update-function-code --function-name ${{ vars.READER_FUNCTION_NAME }} --image-uri $IMAGE_URI


  update-log-writer-lambda-function:
    runs-on: ubuntu-latest
    needs:
      - code-dependent-cloud-formation
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Update lambda function
        shell: bash
        run: |
          IMAGE_URI=${{ steps.login-ecr.outputs.registry }}/${{ vars.WRITER_ECR_REPO }}:latest

          echo "Updating Lambda function ${{ vars.WRITER_FUNCTION_NAME }} with image $IMAGE_URI..."
          aws lambda update-function-code --function-name ${{ vars.WRITER_FUNCTION_NAME }} --image-uri $IMAGE_URI


